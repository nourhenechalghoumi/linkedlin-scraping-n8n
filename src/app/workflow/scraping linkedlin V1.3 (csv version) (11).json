{
  "name": "scraping linkedlin V1.4 (ALL companies version)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "205690e7-c532-45e4-92c8-c3bd21b44c58",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -7712,
        3744
      ],
      "id": "ed04ee80-d9ac-4aa3-8f9f-471d02111b0a",
      "name": "Webhook1",
      "webhookId": "205690e7-c532-45e4-92c8-c3bd21b44c58",
      "notes": "Point d'entrée du workflow - Reçoit les données POST contenant la liste des entreprises à rechercher. Attend un tableau d'objets avec les champs: Company Name, Region, et Max Results."
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\n\n// Process input CSV data\nconst companiesArray = Array.isArray(inputData.body) ? inputData.body : \n                     Array.isArray(inputData.body.body) ? inputData.body.body : \n                     [inputData.body];\n\nif (!Array.isArray(companiesArray)) {\n  throw new Error('Expected an array of companies');\n}\n\nconst allCompanies = companiesArray.map((company, index) => ({\n  companyName: company[\"Company Name\"]?.trim() || company[\"companyName\"]?.trim(),\n  region: company[\"Region\"]?.trim() || company[\"region\"]?.trim(),\n  maxResults: parseInt(company[\"Max Results\"] || company[\"maxResults\"] || 20),\n  currentStartIndex: 1,\n  companyIndex: index,\n  totalCompanies: companiesArray.length\n}));\n\n// Create one item for each company to process them all\nreturn allCompanies.map(company => ({\n  json: {\n    ...company,\n    allCompanies: allCompanies,\n    allResults: []\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7504,
        3744
      ],
      "id": "8d803953-b87f-4b32-a4ec-c62c71cd4717",
      "name": "Process Input1",
      "notes": "Traite les données d'entrée: \n1. Normalise la structure des données (peut venir de différentes sources)\n2. Valide que c'est un tableau d'entreprises\n3. Crée un objet standardisé pour chaque entreprise avec: nom, région, max résultats\n4. Initialise les paramètres de pagination (startIndex=1)\n5. NOUVEAU: Crée un item pour CHAQUE entreprise pour les traiter toutes"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "companyName",
              "value": "={{ $json.companyName }}",
              "type": "string",
              "id": "9a61427e-7a8c-4fd1-8370-04ff8e44c0cb"
            },
            {
              "name": "region",
              "value": "={{ $json.region }}",
              "type": "string",
              "id": "f2da7529-9961-44e9-b8f7-888838566669"
            },
            {
              "name": "maxResults",
              "value": "={{ $json.maxResults }}",
              "type": "number",
              "id": "ac7292a0-921f-4130-971b-a3e8a54a5692"
            },
            {
              "name": "currentStartIndex",
              "value": "={{ $json.currentStartIndex }}",
              "type": "number",
              "id": "f0fddc69-49ca-45b3-add8-18ac3c4be9e3"
            },
            {
              "id": "55cb16e0-0161-47f4-9d6b-4c9b8f866af1",
              "name": "allCompanies",
              "value": "={{ $json.allCompanies }}",
              "type": "string"
            },
            {
              "id": "7ced36cf-23f0-4325-8acb-1dd547edd3f6",
              "name": "allResults",
              "value": "={{ $json.allResults || [] }}",
              "type": "string"
            },
            {
              "id": "companyIndex",
              "name": "companyIndex",
              "value": "={{ $json.companyIndex }}",
              "type": "number"
            },
            {
              "id": "totalCompanies",
              "name": "totalCompanies",
              "value": "={{ $json.totalCompanies }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "name": "Set Parameters1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7168,
        3920
      ],
      "id": "f9ffba2f-45df-4c22-9bf2-51c039ad8aa5",
      "notes": "Définit les paramètres globaux du workflow:\n- Nom de l'entreprise et région pour la recherche\n- Paramètres de pagination (maxResults, currentStartIndex)\n- Stocke la liste complète des entreprises (allCompanies)\n- Initialise le tableau pour collecter tous les résultats (allResults)\n- NOUVEAU: Ajoute index et total pour suivi du progrès"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/customsearch/v1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "AIzaSyA18AN6G24M4dDQjL6hocUhrXSaz6nW6e0"
            },
            {
              "name": "cx",
              "value": "320c57479ec794216"
            },
            {
              "name": "q",
              "value": "={{$node[\"Set Parameters1\"].json.companyName}} {{$node[\"Set Parameters1\"].json.region}} site:linkedin.com/in"
            },
            {
              "name": "start",
              "value": "={{$node[\"Set Parameters1\"].json.currentStartIndex}}"
            },
            {
              "name": "num",
              "value": "={{Math.min(10, $node[\"Set Parameters1\"].json.maxResults - $node[\"Set Parameters1\"].json.currentStartIndex + 1)}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Search LinkedIn Profiles1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6960,
        3920
      ],
      "id": "98010d74-40e9-4849-95c7-ac467f71f6d9",
      "notes": "Effectue la recherche sur LinkedIn via Google Custom Search API:\n- Combine nom entreprise + région + 'site:linkedin.com/in'\n- Gère la pagination (paramètres start et num)\n- Limite à 10 résultats par requête (max de l'API)\n- Utilise les credentials Google API (key et cx)\n- MAINTENANT: traite chaque entreprise individuellement"
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json;\nconst companyName = $node[\"Set Parameters1\"].json.companyName || '';\nconst region = $node[\"Set Parameters1\"].json.region || '';\nconst companyIndex = $node[\"Set Parameters1\"].json.companyIndex || 0;\nconst totalCompanies = $node[\"Set Parameters1\"].json.totalCompanies || 1;\n\n// Pagination logic\nlet nextStartIndex = $node[\"Set Parameters1\"].json.currentStartIndex;\nif (response.queries?.nextPage?.[0]?.startIndex) {\n  nextStartIndex = response.queries.nextPage[0].startIndex;\n}\nconst hasMoreResults = nextStartIndex <= $node[\"Set Parameters1\"].json.maxResults;\n\n// Process items\nconst items = response.items || [];\nif (items.length === 0) {\n  return [{\n    json: {\n      status: \"No results found\",\n      startIndex: nextStartIndex,\n      hasMoreResults: false,\n      search_company: companyName,\n      search_region: region,\n      companyIndex: companyIndex,\n      totalCompanies: totalCompanies,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Enhanced phone number regex patterns\nconst phonePatterns = [\n  /\\+[\\d\\s]{10,15}/g,\n  /\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}/g,\n  /\\d{2}[\\s.]?\\d{2}[\\s.]?\\d{2}[\\s.]?\\d{2}[\\s.]?\\d{2}/g,\n  /\\d{3}[\\s.-]\\d{3}[\\s.-]\\d{4}/g,\n  /\\d{4}[\\s.-]\\d{3}[\\s.-]\\d{3}/g,\n  /(mobile|mob|tel|phone)[:\\s]*([+\\d][\\d\\s\\-().]{7,})/gi\n];\n\nconst emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\n\nconst results = items.map(item => {\n  const titleParts = item.title?.split(/ - | at | \\| /) || [];\n  const name = titleParts[0]?.trim() || '';\n  let position = titleParts.length > 1 ? titleParts[1] : '';\n  \n  position = position\n    .replace(/ at LinkedIn/i, '')\n    .replace(new RegExp(` at ${companyName}`, 'i'), '')\n    .replace(/^[\\W_]+|[\\W_]+$/g, '')\n    .trim();\n  \n  const phones = new Set();\n  \n  if (item.snippet) {\n    phonePatterns.forEach(pattern => {\n      const matches = item.snippet.match(pattern) || [];\n      matches.forEach(match => {\n        const cleanPhone = match\n          .replace(/[^\\d+]/g, '')\n          .replace(/\\s+/g, '')\n          .trim();\n        \n        if (cleanPhone.replace(/\\D/g, '').length >= 7) {\n          phones.add(cleanPhone);\n        }\n      });\n    });\n  }\n  \n  const emails = item.snippet?.match(emailRegex) || [];\n  \n  return {\n    full_name: name,\n    exact_position: position,\n    linkedin_url: item.link || '',\n    profile_snippet: item.snippet || '',\n    search_company: companyName,\n    search_region: region,\n    phone_numbers: Array.from(phones).join('; ') || '',\n    hasMoreResults: hasMoreResults,\n    companyIndex: companyIndex,\n    totalCompanies: totalCompanies,\n    timestamp: new Date().toISOString()\n  };\n});\n\nreturn results.map(r => ({ json: r }));"
      },
      "name": "Process Profiles1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6768,
        3920
      ],
      "id": "93831ad9-6f32-46bc-84fa-58a13d014228",
      "notes": "Traite les profils LinkedIn trouvés:\n1. Extrait le nom et poste depuis le titre\n2. Nettoie le poste (enlève 'at LinkedIn' et le nom de l'entreprise)\n3. Extrait les numéros de téléphone avec plusieurs regex\n4. Extrait les emails trouvés dans le snippet\n5. Gère la pagination (détermine s'il y a plus de résultats)\n6. Ajoute des métadonnées (entreprise recherchée, région, timestamp)\n7. NOUVEAU: Ajoute le suivi du progrès (companyIndex/totalCompanies)"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const profile = item.json;\n  if (!profile.full_name) return { json: profile };\n  \n  const nameParts = profile.full_name.split(/[\\s,]+/).filter(part => part.trim() !== '');\n  let firstName = '';\n  let lastName = '';\n  \n  if (nameParts.length === 1) {\n    firstName = nameParts[0];\n  } else if (nameParts.length > 1) {\n    const titles = ['Mr', 'Ms', 'Mrs', 'Dr', 'Prof'];\n    const suffixes = ['Jr', 'Sr', 'II', 'III', 'IV', 'PhD', 'MBA'];\n    \n    let startIdx = titles.includes(nameParts[0].replace(/\\./g, '')) ? 1 : 0;\n    \n    firstName = nameParts[startIdx];\n    lastName = nameParts.slice(startIdx + 1).join(' ');\n    \n    const lastPart = nameParts[nameParts.length - 1];\n    if (suffixes.includes(lastPart.replace(/\\./g, ''))) {\n      lastName = lastName.replace(new RegExp(`\\\\s*${lastPart}\\\\s*$`), '');\n    }\n  }\n  \n  const cleanName = (str) => {\n    if (!str) return '';\n    return str\n      .replace(/[^\\p{L}\\s-]/gu, '')\n      .replace(/\\s+/g, ' ')\n      .trim()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n  };\n  \n  return {\n    json: {\n      ...profile,\n      clean_first_name: cleanName(firstName),\n      clean_last_name: cleanName(lastName),\n      name_quality: nameParts.length > 1 ? 'complete' : 'partial'\n    }\n  };\n});"
      },
      "name": "Clean Names1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6560,
        3920
      ],
      "id": "d3de924d-fd12-43fd-838b-37f46bf56c8e",
      "notes": "Nettoie et sépare les noms complets:\n1. Sépare prénom et nom\n2. Gère les titres (Mr, Dr) et suffixes (Jr, PhD)\n3. Nettoie les caractères spéciaux et uniformise la casse\n4. Évalue la qualité du nom (complet/partiel)\n5. Crée des champs clean_first_name et clean_last_name standardisés"
    },
    {
      "parameters": {
        "batchSize": 100,
        "options": {}
      },
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        -6304,
        3904
      ],
      "id": "fc9db069-c1f9-4948-b0ec-b48617178a70",
      "notes": "Divise les résultats en lots de 100 profils pour:\n1. Éviter de surcharger les APIs suivantes\n2. Permettre un traitement parallèle\n3. Faciliter le débogage en cas d'erreur"
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "name": "Delay",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -6064,
        3904
      ],
      "id": "2cafacb9-9be4-4bd0-bfba-822f20f41c08",
      "webhookId": "2609d5fa-0324-4523-8241-f27e731ca416",
      "notes": "Pause entre les requêtes pour:\n1. Respecter les limites de taux de l'API Google\n2. Éviter le blocage par LinkedIn\n3. Simuler un comportement humain\n4. NOUVEAU: Réduit le délai pour traiter plus rapidement toutes les entreprises"
    },
    {
      "parameters": {
        "jsCode": "function generateEmails(firstName, lastName, company) {\n  if (!firstName || !lastName) return [];\n  \n  const cleanCompany = (company || '').toLowerCase().replace(/[^a-z0-9-]/g, '');\n  const domains = [];\n  \n  if (cleanCompany) {\n    domains.push(\n      `${cleanCompany}.com`,\n      `${cleanCompany}.net`,\n      `${cleanCompany}.org`,\n      `${cleanCompany}-group.com`,\n      `${cleanCompany}-holding.com`,\n      `${cleanCompany}-inc.com`,\n      `${cleanCompany}-llc.com`\n    );\n    \n    const region = $node[\"Set Parameters1\"].json.region || '';\n    if (region.includes('France')) domains.push(`${cleanCompany}.fr`);\n    if (region.includes('Germany')) domains.push(`${cleanCompany}.de`);\n    if (region.includes('UK')) domains.push(`${cleanCompany}.co.uk`);\n  }\n  \n  domains.push('gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'icloud.com');\n  \n  const patterns = [];\n  const firstInitial = firstName.charAt(0).toLowerCase();\n  const lastInitial = lastName.charAt(0).toLowerCase();\n  \n  domains.forEach(domain => {\n    patterns.push(\n      `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`,\n      `${firstName.toLowerCase()}${lastInitial}@${domain}`,\n      `${firstInitial}${lastName.toLowerCase()}@${domain}`,\n      `${firstName.toLowerCase()}@${domain}`,\n      `${firstInitial}.${lastName.toLowerCase()}@${domain}`,\n      `${lastName.toLowerCase()}.${firstName.toLowerCase()}@${domain}`,\n      `${lastName.toLowerCase()}${firstInitial}@${domain}`\n    );\n  });\n  \n  return [...new Set(patterns)];\n}\n\nfunction validateEmail(email) {\n  if (!email) return { valid: false };\n  \n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return { valid: false };\n  \n  const disposable = [\n    'mailinator.com', 'tempmail.com', '10minutemail.com',\n    'guerrillamail.com', 'throwawaymail.com', 'temp-mail.org'\n  ];\n  \n  const domain = email.split('@')[1].toLowerCase();\n  if (disposable.includes(domain)) return { valid: false };\n  \n  return { valid: true };\n}\n\nreturn $input.all().map(item => {\n  const profile = item.json;\n  if (!profile.clean_first_name || !profile.clean_last_name) return { json: profile };\n  \n  let bestEmail = '';\n  if (profile.snippet_emails) {\n    const emails = profile.snippet_emails.split(';');\n    for (const email of emails) {\n      if (validateEmail(email.trim()).valid) {\n        bestEmail = email.trim();\n        break;\n      }\n    }\n  }\n  \n  const generatedEmails = bestEmail ? [] : generateEmails(\n    profile.clean_first_name,\n    profile.clean_last_name,\n    $node[\"Set Parameters1\"].json.companyName\n  );\n  \n  if (!bestEmail) {\n    for (const email of generatedEmails) {\n      if (validateEmail(email).valid) {\n        bestEmail = email;\n        break;\n      }\n    }\n  }\n  \n  return {\n    json: {\n      ...profile,\n      email: bestEmail,\n      email_source: bestEmail ? \n        (profile.snippet_emails?.includes(bestEmail) ? 'snippet' : 'generated') : \n        'none',\n      email_patterns_tried: generatedEmails.join('; ')\n    }\n  };\n});"
      },
      "name": "Free Email Finder",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5744,
        3904
      ],
      "id": "aee06f9c-799d-4679-ba36-d0a702303d4a",
      "notes": "Génère et valide des emails basés sur:\n1. D'abord utilise les emails trouvés dans le snippet\n2. Sinon génère des combinaisons prénom/nom/entreprise\n3. Supporte différents domaines selon la région (.fr, .de, etc.)\n4. Filtre les emails jetables/invalides\n5. Enregistre la source de l'email (trouvé vs généré)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const name = item.json.clean_first_name + \" \" + item.json.clean_last_name;\n  const title = item.json.exact_position || item.json.title || '';\n  const snippet = item.json.profile_snippet || '';\n  const url = item.json.linkedin_url || item.json.link || '';\n  const email = item.json.email || '';\n  const now = new Date();\n  \n  let startDate = '';\n  let duration = '';\n\n  const startMatch = snippet.match(/(?:since|from|depuis)\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|\\d{4})[a-z]*\\s*(\\d{4})?/i);\n  if (startMatch) {\n    const month = isNaN(startMatch[1]) ? startMatch[1] : 'Jan';\n    const year = startMatch[2] || startMatch[1];\n    startDate = `${month} ${year}`;\n    try {\n      const dateObj = new Date(`${month} 1, ${year}`);\n      const months = Math.floor((now.getTime() - dateObj.getTime()) / (1000 * 60 * 60 * 24 * 30));\n      duration = `${Math.floor(months / 12)} yrs ${months % 12} mos`;\n    } catch {}\n  }\n\n  return {\n    json: {\n      name,\n      title,\n      snippet,\n      url,\n      email,\n      startDate,\n      duration,\n      search_company: item.json.search_company, \n      search_region: item.json.search_region,\n      companyIndex: item.json.companyIndex,\n      totalCompanies: item.json.totalCompanies\n    }\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5456,
        3920
      ],
      "id": "c49b7334-4137-4469-a140-383f830bee40",
      "name": "Format Results1",
      "notes": "Formate les résultats finaux pour l'export:\n1. Combine prénom et nom nettoyés\n2. Extrait la date de début et calcule la durée dans le poste\n3. Structure les données pour la feuille Google\n4. Conserve les métadonnées de recherche (entreprise, région)\n5. NOUVEAU: Conserve le suivi du progrès"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "13wyfHaoqV0QBNc9D5oEdloT1FhcI3d-ngtq_8Wed1GM",
          "mode": "list",
          "cachedResultName": "profiles emplyee company",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/13wyfHaoqV0QBNc9D5oEdloT1FhcI3d-ngtq_8Wed1GM/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1142911768,
          "mode": "list",
          "cachedResultName": "v1.4 ALL companies",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/13wyfHaoqV0QBNc9D5oEdloT1FhcI3d-ngtq_8Wed1GM/edit#gid=1142911768"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "snippet",
              "displayName": "snippet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "search_company",
              "displayName": "search_company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "search_region",
              "displayName": "search_region",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "startDate",
              "displayName": "startDate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "duration",
              "displayName": "duration",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "companyIndex",
              "displayName": "companyIndex",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalCompanies",
              "displayName": "totalCompanies",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "name": "Save to Google Sheets1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -5136,
        4368
      ],
      "id": "1b28c31c-d4a3-4fc8-9593-47c92b42ceca",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "HE6N92CyVizGyp5P",
          "name": "Google Sheets account"
        }
      },
      "notes": "Sauvegarde les résultats dans Google Sheets:\n- Ajoute les nouvelles lignes sans écraser les existantes\n- Mappe automatiquement les champs aux colonnes\n- Utilise l'API Google Sheets avec authentification OAuth2\n- Cible une feuille spécifique dans le document\n- NOUVEAU: Optimisé pour traiter toutes les entreprises"
    },
    {
      "parameters": {
        "jsCode": "// Collect all results from all companies processed so far\nconst allResults = $input.all().map(item => item.json);\n\n// Get unique companies processed\nconst processedCompanies = new Set();\nallResults.forEach(result => {\n  if (result.search_company) {\n    processedCompanies.add(result.search_company);\n  }\n});\n\n// Calculate total stats\nconst totalCompanies = allResults.length > 0 ? allResults[0].totalCompanies || processedCompanies.size : 0;\nconst totalProfiles = allResults.length;\n\nreturn [{\n  json: {\n    status: \"success\",\n    message: `Processing complete! Found ${totalProfiles} profiles across ${processedCompanies.size} companies`,\n    totalCompanies: totalCompanies,\n    totalProfiles: totalProfiles,\n    processedCompanies: Array.from(processedCompanies),\n    profiles: allResults,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        4368
      ],
      "id": "aggregate-all-results",
      "name": "Aggregate All Results",
      "notes": "NOUVEAU: Agrège TOUS les résultats de TOUTES les entreprises:\n1. Collecte tous les profils trouvés\n2. Calcule les statistiques finales complètes\n3. Prépare la réponse avec tous les profils\n4. Permet l'affichage complet dans l'interface"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -4640,
        4368
      ],
      "id": "f1db5a11-d64c-4c84-837c-3d1fcef97344",
      "name": "Respond to Webhook",
      "notes": "Envoie une réponse JSON complète au webhook initial:\n- Confirme la réussite du traitement\n- Donne des stats (nb entreprises traitées, nb profils trouvés)\n- Inclut TOUS les profils trouvés pour l'affichage\n- Inclut un timestamp pour le suivi\n- NOUVEAU: Répond avec toutes les données pour l'interface"
    },
    {
      "parameters": {
        "content": "## Point d'entrée du workflow - Reçoit les données POST contenant la liste des entreprises à rechercher. Attend un tableau d'objets avec les champs: Company Name, Region, et Max Results.\n",
        "height": 272,
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -8112,
        3648
      ],
      "typeVersion": 1,
      "id": "bd552cb6-3cf8-4aa2-b754-80841880c2d4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## AMÉLIORÉ V1.4: Traite TOUTES les entreprises\n\n1. Normalise la structure des données\n2. Crée un item pour CHAQUE entreprise \n3. Ajoute un index et total pour le suivi\n4. Permet le traitement parallèle de toutes les entreprises",
        "height": 256,
        "width": 512,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -7504,
        3456
      ],
      "typeVersion": 1,
      "id": "7d7f7c80-9b89-4d0e-9af8-b2347db09678",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## NOUVEAU: Agrège TOUS les résultats\n\n1. Collecte tous les profils de toutes les entreprises\n2. Calcule les statistiques finales complètes\n3. Prépare la réponse avec tous les profils\n4. Permet l'affichage complet dans l'interface",
        "height": 224,
        "width": 400,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -4800,
        4144
      ],
      "typeVersion": 1,
      "id": "new-aggregate-note",
      "name": "New Aggregate Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook1": {
      "main": [
        [
          {
            "node": "Process Input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Input1": {
      "main": [
        [
          {
            "node": "Set Parameters1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Parameters1": {
      "main": [
        [
          {
            "node": "Search LinkedIn Profiles1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search LinkedIn Profiles1": {
      "main": [
        [
          {
            "node": "Process Profiles1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Profiles1": {
      "main": [
        [
          {
            "node": "Clean Names1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Names1": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "Delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delay": {
      "main": [
        [
          {
            "node": "Free Email Finder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Free Email Finder": {
      "main": [
        [
          {
            "node": "Format Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Results1": {
      "main": [
        [
          {
            "node": "Save to Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Google Sheets1": {
      "main": [
        [
          {
            "node": "Aggregate All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate All Results": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "807a7293-e9db-4d24-9227-2d98b7c6dfe2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ed11c1c1a4b5d1be86a8f9323707f124418d649860465bb4415c1bafa4c2d870"
  },
  "id": "3vu31TfKZ5h3xyu4",
  "tags": []
}